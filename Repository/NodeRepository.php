<?php

namespace Kunstmaan\AdminNodeBundle\Repository;

use Kunstmaan\AdminBundle\Entity\User;

use Kunstmaan\AdminNodeBundle\Entity\HasNodeInterface;
use Kunstmaan\AdminBundle\Entity\User as Baseuser;
use Kunstmaan\AdminNodeBundle\Entity\Node;
use Kunstmaan\AdminBundle\Modules\ClassLookup;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends EntityRepository
{

    public function getForNodeTranslation(NodeTranslation $nodeTranslation, $user, $permission, $includehiddenfromnav = false) {
        $qb = $this->createQueryBuilder('b')
        ->select('b')
        ->innerJoin("b.nodeTranslations", "t")
        ->where('b.deleted = 0')
        ->andWhere("t.id = :nodetranslationid")->setParameter('nodetranslationid', $nodeTranslation->getId())
        ->andWhere('b.id IN (
                SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
        )')
        ->setParameter(1, 'Kunstmaan\\AdminNodeBundle\\Entity\\Node')
        ->setParameter(2, '%|'.$permission.':1|%');
        $groupIds = $user->getGroupIds();
        if (!empty($groupIds)) {
            $qb->setParameter(3, $groupIds);
        } else {
            $qb->setParameter(3, null);
        }
        if (!$includehiddenfromnav) {
            $qb->andWhere('b.hiddenfromnav != true');
        }

        $qb->addOrderBy('t.weight', 'ASC')
        ->addOrderBy('t.title', 'ASC');

        $query = $qb->getQuery();
        $query->useResultCache(true, 3600);
        $result = $query->getResult();

        return $result;
    }

	public function getTopNodes($lang, $user, $permission, $includehiddenfromnav = false) {
	   return $this->getChildNodes(null, $lang, $user, $permission, $includehiddenfromnav);
	}

	public function getNodeFor(HasNodeInterface $hasNode, $user, $permission, $includehiddenfromnav = false) {
	    return $this->getNodeForIdAndEntityname($hasNode->getId(), ClassLookup::getClass($hasNode), $user, $permission, $includehiddenfromnav);
	}

	public function getNodeForId($id, $user, $permission, $includehiddenfromnav = false) {
	    $qb = $this->createQueryBuilder('b')
	    ->where('b.deleted = 0')
	    ->andWhere("b.id = :id")->setParameter('id', $id)
	    ->andWhere('b.id IN (
	            SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
	    )')
	    ->setParameter(1, 'Kunstmaan\\AdminNodeBundle\\Entity\\Node')
	    ->setParameter(2, '%|'.$permission.':1|%');
	    $groupIds = $user->getGroupIds();
	    if (!empty($groupIds)) {
	        $qb->setParameter(3, $groupIds);
	    } else {
	        $qb->setParameter(3, null);
	    }
	    if (!$includehiddenfromnav) {
	        $qb->andWhere('b.hiddenfromnav != true');
	    }

	    $query = $qb->getQuery();
	    $query->useResultCache(true, 3600);
	    $result = $query->getOneOrNullResult();

	    return $result;
	}

	public function getNodeForIdAndEntityname($id, $entityName, $user, $permission, $includehiddenfromnav = false) {
	    $qb = $this->createQueryBuilder('b')
	    ->select('b')
	    ->innerJoin("b.nodeTranslations", "t")
	    ->innerJoin("t.nodeVersions", "v")
	    ->where('b.deleted = 0')
	    ->andWhere("v.refId = :refId")->setParameter('refId', $id)
	    ->andWhere("v.refEntityname = :refEntityname")->setParameter('refEntityname', $entityName)
	    ->andWhere('b.id IN (
	            SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
	    )')
	    ->setParameter(1, 'Kunstmaan\\AdminNodeBundle\\Entity\\Node')
	    ->setParameter(2, '%|'.$permission.':1|%');
	    $groupIds = $user->getGroupIds();
	    if (!empty($groupIds)) {
	        $qb->setParameter(3, $groupIds);
	    } else {
	        $qb->setParameter(3, null);
	    }
	    if (!$includehiddenfromnav) {
	        $qb->andWhere('b.hiddenfromnav != true');
	    }

	    $qb->addOrderBy('t.weight', 'ASC')
	    ->addOrderBy('t.title', 'ASC');

	    $query = $qb->getQuery();
	    $query->useResultCache(true, 3600);
	    $result = $query->getOneOrNullResult();

	    return $result;
	}

	public function getNodeForSlug($parentNode, $slug){
		$slugparts = explode("/", $slug);
		$result = null;
		foreach($slugparts as $slugpart){
			if($parentNode){
				if($r = $this->findOneBy(array('slug' => $slugpart, 'parent.parent' => $parentNode->getId()))){
					$result = $r;
				}
			} else {
				if($r = $this->findOneBy(array('slug' => $slugpart))){
					$result = $r;
				}
			}
		}
		return $result;
	}

	/**
	 * Create a node for an HasNodeInterface
	 *
	 * @param HasNodeInterface $hasNode      The node
	 * @param string           $lang         The locale
	 * @param User             $owner        The owner
	 * @param string           $internalName The internal name
	 *
	 * @throws \Exception
	 * @return Node
	 */
	public function createNodeFor(HasNodeInterface $hasNode, $lang, User $owner, $internalName = null)
	{
		$em = $this->getEntityManager();
		$classname = ClassLookup::getClass($hasNode);
		if (!$hasNode->getId()>0) {
			throw new \Exception("the entity of class ". $classname . " has no id, maybe you forgot to flush first");
		}
		$entityrepo = $em->getRepository($classname);
		$node = new Node();
		$node->setRefEntityname($classname);
		$node->setDeleted(false);
		$node->setInternalName($internalName);
		$parent = $hasNode->getParent();
		if ($parent) {
			$parentNode = $this->getNodeFor($parent, $owner, 'write', true);
			if ($parentNodeVersion) {
				$node->setParent($parentNode);
				$node->setRoles($parentNode->getRoles());
			}
		}
		$em->persist($node);
		$em->flush();
		$em->refresh($node);
		$nodeTranslation = $em->getRepository('KunstmaanAdminNodeBundle:NodeTranslation')->createNodeTranslationFor($hasNode, $lang, $node, $owner);

		return $node;
	}

	/**
	 * Get the children nodes
	 *
	 * @param number  $parentId             The parent id
	 * @param string  $lang                 The locale
	 * @param User    $user                 The user
	 * @param string  $permission           The permission
	 * @param boolean $includehiddenfromnav include hiddenfromnav or not
	 *
	 * @return array
	 */
	public function getChildNodes($parentId, $lang, User $user, $permission, $includehiddenfromnav = false)
	{
	    $qb = $this->createQueryBuilder('b')
	       ->select('b')
	       ->innerJoin("b.nodeTranslations", "t")
	       ->where('b.deleted = 0');

        if (!$includehiddenfromnav) {
	        $qb->andWhere('b.hiddenfromnav != true');
	    }

	    $qb->andWhere('b.id IN (
	            SELECT p.refId FROM Kunstmaan\AdminBundle\Entity\Permission p WHERE p.refEntityname = ?1 AND p.permissions LIKE ?2 AND p.refGroup IN(?3)
	    )')
	       ->andWhere("t.lang = :lang");

	    $qb->addOrderBy('t.weight', 'ASC')
           ->addOrderBy('t.title', 'ASC')
	       ->setParameter(1, 'Kunstmaan\\AdminNodeBundle\\Entity\\Node')
	       ->setParameter(2, '%|'.$permission.':1|%');

	    $groupIds = $user->getGroupIds();
	    if (!empty($groupIds)) {
	        $qb->setParameter(3, $groupIds);
	    } else {
	        $qb->setParameter(3, null);
	    }
	    $qb->setParameter("lang", $lang);
	    if (is_null($parentId)) {
	        $qb->andWhere("b.parent is NULL");
	    } else {
	        $qb->andWhere("b.parent = :parent")
	        ->setParameter("parent", $parentId);
	    }
        $query = $qb->getQuery();
        $query->useResultCache(true, 3600);
	    $result = $query->getResult();

	    return $result;
	}

	/**
	 * @return array
	 */
	public function getAllTopNodes()
	{
	    $qb = $this->createQueryBuilder('b')
	    ->select('b')
	    ->where('b.deleted = 0')
	    ->andWhere("b.parent IS NULL");

	    $query = $qb->getQuery();
        $query->useResultCache(true, 3600);
	    $result = $query->getResult();

	    return $result;
	}
}